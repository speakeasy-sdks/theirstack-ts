/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class SearchCompaniesRequest extends SpeakeasyBase {
  /**
   * Comma-separated list of company names. Must match exactly the name of a company in our database. Case insensitive
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=companies",
  })
  companies?: string[];

  /**
   * Array of countries, or string with comma-separated country names where the company HQ belongs to. Case-sensitive
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=countries",
  })
  countries?: string[];

  /**
   * Don't return more than 2 companies with different names but associated to the same domain
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=distinct_urls",
  })
  distinctUrls?: boolean;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=exclude_cities_pattern",
  })
  excludeCitiesPattern?: string;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=exclude_companies_pattern",
  })
  excludeCompaniesPattern?: string;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=exclude_industries_pattern",
  })
  excludeIndustriesPattern?: string;

  /**
   * Exclude companies using at least one technology that matches this regex pattern. Pass a comma-separated list of regex patterns, like `snowflake, big.?query`
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=exclude_technologies",
  })
  excludeTechnologies?: string;

  /**
   * Whether to return extra data, like headcount per department data
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=extra" })
  extra?: boolean;

  /**
   * Format of the response. One of `json` or `csv`. Defaults to `json`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=format",
  })
  format?: shared.ResponseFormatEnum;

  /**
   * Number of days to look back for jobs from the companies.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=fromage",
  })
  fromage?: number;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=include_cities_pattern",
  })
  includeCitiesPattern?: string;

  /**
   * Whether or not to include the company description in the results.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=include_description",
  })
  includeDescription?: boolean;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=include_industries_pattern",
  })
  includeIndustriesPattern?: string;

  /**
   * Comma-separated names of technologies. Case insensitive
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=include_technologies_any",
  })
  includeTechnologiesAny?: string;

  /**
   * Comma-separated names of technologies. Case insensitive. If passed, the result will include companies that use any of the technologies specified in `include_technologies_any` AND any of the technologies specified in `include_technologies_any_second_set`
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=include_technologies_any_second_set",
  })
  includeTechnologiesAnySecondSet?: string;

  /**
   * Regex pattern to look for in job descriptions. Useful to detect companies using certain technologies that don't appear in the /technologies endpoint, or anything else mentioned in job descriptions. Case insensitive.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=job_description_pattern",
  })
  jobDescriptionPattern?: string;

  /**
   * Whether to make searches on job descriptions case-sensitive or insensitive.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=job_description_pattern_is_case_insensitive",
  })
  jobDescriptionPatternIsCaseInsensitive?: boolean;

  /**
   * - Simple example: `software developer`
   *
   * @remarks
   * - More complex example: `engineer|developer|data|manager|director|design|product|ingenier|desarrollador`
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=job_title_pattern",
  })
  jobTitlePattern?: string;

  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=limit" })
  limit?: number;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=max_employee_count",
  })
  maxEmployeeCount?: number;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=min_employee_count",
  })
  minEmployeeCount?: number;

  /**
   * Only return companies with at least this number of jobs
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=min_jobs",
  })
  minJobs?: number;

  /**
   * If `true`, only companies that haven't been fetched by the user will be returned. Credits will be consumed.
   *
   * @remarks
   *
   * If `false`, only companies that have been fetched by the user will be returned. In this case, your call won't consume credits.
   *
   * If `all`, both new and fetched companies may be returned.
   *
   * Defaults to `all`
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=new_companies",
  })
  newCompanies?: shared.NewCompaniesEnum;

  /**
   * Order by field. Descending
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=order_by",
  })
  orderBy?: shared.CompanyOrderByEnum;

  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page" })
  page?: number;
}

export class SearchCompaniesResponse extends SpeakeasyBase {
  /**
   * Successful Response
   */
  @SpeakeasyMetadata()
  companiesResponse?: shared.CompaniesResponse;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Validation Error
   */
  @SpeakeasyMetadata()
  httpValidationError?: shared.HTTPValidationError;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
