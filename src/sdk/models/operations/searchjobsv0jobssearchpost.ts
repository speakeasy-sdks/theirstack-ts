/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { RFCDate } from "../../types";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

/**
 * Format of the response. One of `json` or `csv`. Defaults to `json`.
 */
export enum SearchJobsV0JobsSearchPostFormatFormatEnum {
  Json = "json",
  Csv = "csv",
}

/**
 * If `true`, only companies that haven't been fetched by the user will be returned. Credits will be consumed.
 *
 * @remarks
 *
 * If `false`, only companies that have been fetched by the user will be returned. In this case, your call won't consume credits.
 *
 * If `all`, both new and fetched companies may be returned.
 *
 * Defaults to `all`
 */
export enum SearchJobsV0JobsSearchPostNewCompaniesNewCompaniesEnum {
  True = "true",
  False = "false",
  All = "all",
}

/**
 * Order results by date or salary desc
 */
export enum SearchJobsV0JobsSearchPostOrderByOrderByEnum {
  Date = "date",
  Salary = "salary",
}

export class SearchJobsV0JobsSearchPostRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  bodySearchJobsV0JobsSearchPost?: shared.BodySearchJobsV0JobsSearchPost;

  /**
   * Case-insensitive patterns to match in the company description. Will return companies that match any of the patterns.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=company_description_patterns_exclude",
  })
  companyDescriptionPatternsExclude?: string[];

  /**
   * Case-insensitive patterns to match in the company description. Will return companies that match any of the patterns.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=company_description_patterns_or",
  })
  companyDescriptionPatternsOr?: string[];

  /**
   * Will return jobs from companies that that have mentioned any of these technologies in their jobs (not necessarily in the jobs returned). Case sensitive. Pass exact names. Check out all the technologies we track at https://docs.google.com/spreadsheets/d/1ybzFfmYH6q_sEux2Jq05ciqVsmIE-6FOpMK5mxJGmIU/edit#gid=1486730285.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=company_technologies",
  })
  companyTechnologies?: string[];

  /**
   * Array of countries, or string with comma-separated country names where the company HQ belongs to. Case-sensitive
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=countries",
  })
  countries?: string[];

  /**
   * 2-letter ISO country code of the location of the job. Can pass more than 1
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=country_codes",
  })
  countryCodes?: string[];

  /**
   * 2-letter ISO country code of the location of the job. Can pass more than 1. Will exclude jobs from these countries
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=country_codes_exclude",
  })
  countryCodesExclude?: string[];

  /**
   * Format of the response. One of `json` or `csv`. Defaults to `json`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=format",
  })
  format?: SearchJobsV0JobsSearchPostFormatFormatEnum;

  /**
   * Number of days to look back for jobs. By default, only jobs published in the last 7 days are returned.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=fromage",
  })
  fromage?: number;

  /**
   * Group results by a given field and get the number of jobs per group. If you pass `company`, you'll get the number of jobs per company. If you pass `job_title`, you'll get the number of jobs per job title. If you pass `location`, you'll get the number of jobs per location.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=group_by",
  })
  groupBy?: string[];

  /**
   * Include a field in the response with the total number of results. WARNING: setting this to True will make the responses much slower, or you'll very likely get timeouts. Set to true only in combination with a date filter, and to get all results, better set a high limit and iterate over pages, setting this to False.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=include_total_results",
  })
  includeTotalResults?: boolean;

  /**
   * Array or comma-separated string with industries, lowercase. Results will only include companies that belong to any of the industries specified in this parameter. Available values: https://docs.google.com/spreadsheets/d/1ybzFfmYH6q_sEux2Jq05ciqVsmIE-6FOpMK5mxJGmIU/edit?usp=sharing
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=industries",
  })
  industries?: string[];

  /**
   * Array or comma-separated string with industries, lowercase. Results will exclude companies that belong to any of the industries specified in this parameter. Available values: https://docs.google.com/spreadsheets/d/1ybzFfmYH6q_sEux2Jq05ciqVsmIE-6FOpMK5mxJGmIU/edit?usp=sharing
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=industries_exclude",
  })
  industriesExclude?: string[];

  /**
   * Regex pattern to look for in job descriptions. Useful to detect companies using certain technologies that don't appear in the /technologies endpoint, or anything else mentioned in job descriptions. Case insensitive.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=job_description_pattern",
  })
  jobDescriptionPattern?: string;

  /**
   * Whether to make searches on job descriptions case-sensitive or insensitive.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=job_description_pattern_is_case_insensitive",
  })
  jobDescriptionPatternIsCaseInsensitive?: boolean;

  /**
   * Return companies that match any of these keywords
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=keywords_or",
  })
  keywordsOr?: string[];

  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=limit" })
  limit?: number;

  /**
   * Regex patterns to match job locations. Case-insensitive. Only jobs with location that match all patterns will be returned.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=location_patterns",
  })
  locationPatterns?: string[];

  /**
   * Regex patterns to match job locations. Case-insensitive. Only jobs with location that do not match any of the patterns will be returned.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=location_patterns_exclude",
  })
  locationPatternsExclude?: string[];

  /**
   * Maximum number of employees in a company
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=max_employee_count",
  })
  maxEmployeeCount?: number;

  /**
   * Maximum company funding, in USD
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=max_funding_usd",
  })
  maxFundingUsd?: number;

  /**
   * Maximum annual salary
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=max_salary_usd",
  })
  maxSalaryUsd?: number;

  /**
   * Minimum number of employees in a company
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=min_employee_count",
  })
  minEmployeeCount?: number;

  /**
   * Minimum company funding, in USD
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=min_funding_usd",
  })
  minFundingUsd?: number;

  /**
   * Minimum annual salary
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=min_salary_usd",
  })
  minSalaryUsd?: number;

  /**
   * If `true`, only companies that haven't been fetched by the user will be returned. Credits will be consumed.
   *
   * @remarks
   *
   * If `false`, only companies that have been fetched by the user will be returned. In this case, your call won't consume credits.
   *
   * If `all`, both new and fetched companies may be returned.
   *
   * Defaults to `all`
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=new_companies",
  })
  newCompanies?: SearchJobsV0JobsSearchPostNewCompaniesNewCompaniesEnum;

  /**
   * Only return YC companies
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=only_yc_companies",
  })
  onlyYcCompanies?: boolean;

  /**
   * Order results by date or salary desc
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=order_by",
  })
  orderBy?: SearchJobsV0JobsSearchPostOrderByOrderByEnum;

  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page" })
  page?: number;

  /**
   * True: only show remote jobs. False: only show non-remote jobs. None: show all jobs.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=remote",
  })
  remote?: boolean;

  /**
   * Regex patterns to match job sources. Case-insensitive.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=scraper_name_patterns",
  })
  scraperNamePatterns?: string[];

  /**
   * ISO 8601 date string (yyyy-mm-dd). Only jobs published in this date or after will be returned.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=since" })
  since?: RFCDate;

  /**
   * Will return jobs where any of these technologies appear. Case sensitive. Pass exact names. Check out all the technologies we track at https://docs.google.com/spreadsheets/d/1ybzFfmYH6q_sEux2Jq05ciqVsmIE-6FOpMK5mxJGmIU/edit#gid=1486730285. If you pass more than one technology, we will return jobs that mentnion all of the technologies.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=technologies_or",
  })
  technologiesOr?: string[];

  /**
   * ISO 8601 date string (yyyy-mm-dd). Only jobs published in this date or before will be returned.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=until" })
  until?: RFCDate;
}

export class SearchJobsV0JobsSearchPostResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Validation Error
   */
  @SpeakeasyMetadata()
  httpValidationError?: shared.HTTPValidationError;

  /**
   * Successful Response
   */
  @SpeakeasyMetadata()
  searchJobsV0JobsSearchPost200ApplicationJSONAny?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
