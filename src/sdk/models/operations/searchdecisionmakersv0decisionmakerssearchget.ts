/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

/**
 * Format of the response. One of `json` or `csv`. Defaults to `json`.
 */
export enum SearchDecisionMakersV0DecisionMakersSearchGetFormatFormatEnum {
  Json = "json",
  Csv = "csv",
}

/**
 * If `true`, only companies that haven't been fetched by the user will be returned. Credits will be consumed.
 *
 * @remarks
 *
 * If `false`, only companies that have been fetched by the user will be returned. In this case, your call won't consume credits.
 *
 * If `all`, both new and fetched companies may be returned.
 *
 * Defaults to `all`
 */
export enum SearchDecisionMakersV0DecisionMakersSearchGetNewCompaniesNewCompaniesEnum {
  True = "true",
  False = "false",
  All = "all",
}

export class SearchDecisionMakersV0DecisionMakersSearchGetRequest extends SpeakeasyBase {
  /**
   * Regex pattern to match company names
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=companies_pattern",
  })
  companiesPattern?: string;

  /**
   * Country name of the company to filter by. Case sensitive
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=country",
  })
  country?: string;

  /**
   * Regex pattern to search in job descriptions. Case insensitive
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=description_pattern",
  })
  descriptionPattern?: string;

  /**
   * Format of the response. One of `json` or `csv`. Defaults to `json`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=format",
  })
  format?: SearchDecisionMakersV0DecisionMakersSearchGetFormatFormatEnum;

  /**
   * Number of days to look back for jobs
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=fromage",
  })
  fromage?: number;

  /**
   * Regex pattern to match job titles
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=job_title_pattern",
  })
  jobTitlePattern?: string;

  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=limit" })
  limit?: number;

  /**
   * Minimum number of employees
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=max_employee_count",
  })
  maxEmployeeCount?: number;

  /**
   * Minimum number of employees
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=min_employee_count",
  })
  minEmployeeCount?: number;

  /**
   * If `true`, only companies that haven't been fetched by the user will be returned. Credits will be consumed.
   *
   * @remarks
   *
   * If `false`, only companies that have been fetched by the user will be returned. In this case, your call won't consume credits.
   *
   * If `all`, both new and fetched companies may be returned.
   *
   * Defaults to `all`
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=new_companies",
  })
  newCompanies?: SearchDecisionMakersV0DecisionMakersSearchGetNewCompaniesNewCompaniesEnum;

  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page" })
  page?: number;

  /**
   * Regex pattern to match any of the technologies we track, listed on the /technologies endpoint
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=technology_pattern",
  })
  technologyPattern?: string;
}

export class SearchDecisionMakersV0DecisionMakersSearchGetResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Successful Response
   */
  @SpeakeasyMetadata({ elemType: shared.DecisionMaker })
  decisionMakers?: shared.DecisionMaker[];

  /**
   * Validation Error
   */
  @SpeakeasyMetadata()
  httpValidationError?: shared.HTTPValidationError;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
